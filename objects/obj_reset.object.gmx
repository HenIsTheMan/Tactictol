<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_reset</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridMain = ds_grid_create(5,5);
gridCheck = ds_grid_create(5,5);
ds_grid_clear(gridMain,-5);
ds_grid_clear(gridCheck,0);

for(i = 0;i &lt; 9;i++){
    grid[i] = ds_grid_create(3,3);
}

turn = 0;
block = 0;
time1 = 5;
time2 = 5;
placed = 0;
cannotBlock = 0;
subimg = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(turn &amp; 1){
    time2--;
} else{
    time1--;
} 
alarm[0] = 1000000/delta_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_pressed(mb_left) &amp;&amp; (position_meeting(mouse_x,mouse_y,self) || point_in_rectangle(mouse_x,mouse_y,0,0,32,32))){
    room_restart();
}

if(point_in_rectangle(mouse_x,mouse_y,0,64,160,64+160)){
    if(mouse_check_button_pressed(mb_left)){
        if(gridMain[# mouse_x div 32,mouse_y div 32 - 2] == -5){
            placed++;
            block = 0;
            xx = mouse_x div 32;
            yy = mouse_y div 32 - 2;
            if(turn &amp; 1){
                gridMain[# xx,yy] = 1;
            } else{
                gridMain[# xx,yy] = 0;
            }
            for(i = 0;i &lt; 9;i++){
                for(n = 0;n &lt; 3;n++){
                    ds_grid_set_grid_region(grid[i],gridMain,n,i div 3,n+2,i div 3 + 2,0,0);
                }
            }
            for(i = 0;i &lt; 9;i++){
                for(n = 0;n &lt; 3;n++){ //combine
                //for(d = 2;d &gt; -1;d--){ //[][]??
                    if(turn &amp; 1){ //point_in_rectangle(mouse_x,mouse_y,n*32,(i div 3)*32+64,(n+3)*32,(i div 3 + 3)*32+64)
                        if((collision_line(n*32,(i div 3)*32+64,(n+3)*32,(i div 3 + 3)*32+64,obj_cursor,0,1) &amp;&amp; ds_grid_get(grid[i],0,0) + ds_grid_get(grid[i],1,1) + ds_grid_get(grid[i],2,2) = 1) || (collision_line((n+3)*32,(i div 3 + 3)*32+64,n*32,(i div 3)*32+64,obj_cursor,0,1) &amp;&amp; ds_grid_get(grid[i],2,0) + ds_grid_get(grid[i],1,1) + ds_grid_get(grid[i],0,2) = 1)){
                            block = 1;
                        }
                    } else{
                        if((collision_line(n*32,(i div 3)*32+64,(n+3)*32,(i div 3 + 3)*32+64,obj_cursor,0,1) &amp;&amp; ds_grid_get(grid[i],0,0) + ds_grid_get(grid[i],1,1) + ds_grid_get(grid[i],2,2) = 2) || (collision_line((n+3)*32,(i div 3 + 3)*32+64,n*32,(i div 3)*32+64,obj_cursor,0,1) &amp;&amp; ds_grid_get(grid[i],2,0) + ds_grid_get(grid[i],1,1) + ds_grid_get(grid[i],0,2) = 2)){
                            block = 1;
                        }
                    }
                }
                //}
            }
            for(i = 0;i &lt; 5;i++){
                for(n = 0;n &lt; 3;n++){
                    if(turn &amp; 1){
                        if((point_in_rectangle(mouse_x,mouse_y,i*32,n*32+64,i*32+32,(n+3)*32+64) &amp;&amp; ds_grid_get_sum(gridMain,i,n,i,n+2) = 1) || (point_in_rectangle(mouse_x,mouse_y,n*32,i*32+64,(n+3)*32,i*32+64+32) &amp;&amp; ds_grid_get_sum(gridMain,n,i,n+2,i) = 1)){
                            block = 1;
                        }
                    } else{
                        if((point_in_rectangle(mouse_x,mouse_y,i*32,n*32+64,i*32+32,(n+3)*32+64) &amp;&amp; ds_grid_get_sum(gridMain,i,n,i,n+2) = 2) || (point_in_rectangle(mouse_x,mouse_y,n*32,i*32+64,(n+3)*32,i*32+64+32) &amp;&amp; ds_grid_get_sum(gridMain,n,i,n+2,i) = 2)){
                            block = 1;
                        }
                    }
                }
            }
            time1 = 5;
            time2 = 5;
            alarm[0] = 1000000/delta_time;
        } else{
            if(gridCheck[# mouse_x div 32,mouse_y div 32 - 2] == 0 &amp;&amp; ds_grid_get_sum(gridCheck,0,0,5,5) &lt; 3){
                gridCheck[# mouse_x div 32,mouse_y div 32 - 2] = 1;
            } else if(gridCheck[# mouse_x div 32,mouse_y div 32 - 2] == 1){
                gridCheck[# mouse_x div 32,mouse_y div 32 - 2] = 0;
            }
            for(m = 0;m &lt; 3;m++){
                for(n = 0;n &lt; 3;n++){
                    sum1 = ds_grid_get(gridCheck,m,n) + ds_grid_get(gridCheck,m+1,n+1) + ds_grid_get(gridCheck,m+2,n+2);
                    sum2 = ds_grid_get(gridCheck,m+2,n) + ds_grid_get(gridCheck,m+1,n+1) + ds_grid_get(gridCheck,m,n+2);
                    sum3 = ds_grid_get(gridMain,m,n) + ds_grid_get(gridMain,m+1,n+1) + ds_grid_get(gridMain,m+2,n+2);
                    sum4 = ds_grid_get(gridMain,m+2,n) + ds_grid_get(gridMain,m+1,n+1) + ds_grid_get(gridMain,m,n+2);  
                    if(sum1 == 3 || sum2 == 3){
                        if((turn &amp; 1 &amp;&amp; (sum3 == 3 || sum4 == 3)) || (~turn &amp; 1 &amp;&amp; (sum3 == 0 || sum4 == 0))){
                            subimg = 1;
                        }
                    }
                }
            }
            for(i = 0;i &lt; 5;i++){
                for(n = 0;n &lt; 3;n++){
                    if(ds_grid_get_sum(gridCheck,i,n,i,n+2) == 3 || ds_grid_get_sum(gridCheck,n,i,n+2,i) == 3){
                        if((turn &amp; 1 &amp;&amp; (ds_grid_get_sum(gridMain,i,n,i,n+2) = 3 || ds_grid_get_sum(gridMain,n,i,n+2,i) = 3)) || (~turn &amp; 1 &amp;&amp; (ds_grid_get_sum(gridMain,i,n,i,n+2) = 0 || ds_grid_get_sum(gridMain,n,i,n+2,i) = 0))){
                            subimg = 1;
                        }
                    }
                }
            }
        }
    } else if(mouse_check_button_pressed(mb_right) &amp;&amp; placed == 1){
        gridMain[# xx,yy] = -5;
        placed = 0;
    } //??
} //=??

if(placed = 1 &amp;&amp; !block){
    cannotBlock = 1;
}

if((cannotBlock &amp;&amp; block) || (placed &gt; 1 &amp;&amp; !block)){
    audio_play_sound(snd_gameOver,0,0);
    room_restart();
}

if(time1 = 0 || time2 = 0 || (mouse_check_button_pressed(mb_left) &amp;&amp; point_in_rectangle(mouse_x,mouse_y,128*(turn &amp; 1),256*(~turn &amp; 1),128*(turn &amp; 1)+32,256*(~turn &amp; 1)+32))){
    block = 0;
    placed = 0;
    cannotBlock = 0;
    ds_grid_clear(gridCheck,0);
    turn++;
    time1 = 5;
    time2 = 5;
    alarm[0] = 1000000/delta_time;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_end,turn % 2,128*(turn &amp; 1),256*(~turn &amp; 1));
draw_sprite(sprite_index,0,x,y);
draw_sprite(sprite_index,1,0,0);
draw_text(96,272,time1);
draw_text_transformed(96,16,time2,1,1,180);
draw_text(32,0,block);

for(c = 0;c &lt; ds_grid_width(gridMain);c++){
    for(r = 0;r &lt; ds_grid_height(gridMain);r++){
        if(gridMain[# c,r] != -5){
            draw_sprite(spr_symbols,gridMain[# c,r],c*32,r*32+64);
        }
        if(gridCheck[# c,r] = 1){
            draw_sprite(spr_check,subimg,c*32,r*32+64);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
